{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Client Sign up screen kazi/app/java/ke.co.kaziapp/ui/v1/register activity.kt(class RegisterActivity : NetworkSensingBaseActivity) - It creates a new user and save the user details to the backend - It verifies user before registering - It validate the user entities to ensure it is in the right format - It ensures the client agrees with the terms and condition of the app before registering Client Verification for verifying the new account kazi/appjava/ke.co.kaziapp/ui/v1/GetOtpActivity.kt(class GetOtpActivity : NetworkSensingBaseActivity) - It verifies the new acccount to ensure the credentials are valid before registering - it ensures that the client credentials for the new account are valid Client Login screen kazi/app/java/ke.co.kaziapp/ui/v1/login activity.kt(class LoginActivity : NetworkSensingBaseActivity) - It verifies to check if the client logs in with the account that is already in the system - It authenticate the client loging in with the account that matches the one in the system - It validate the client password to ensure that the client enters the correct password that matches the one that is already registered in the system Client Verification for verifying the existing account kazi/app/java/ke.co.kaziapp/ui/v1/GetOtpActivity.kt(class GetOtpActivity : NetworkSensingBaseActivity) - It verifies the phone number for sending the otp - It verifies the otp to make sure that the otp send to the user is the valid otp - It ensures that the otp entered by the user is the correct one Client set up profile screen kazi/app/java/ke.co.kaziapp/ui/v1/profilesetting activity.kt(class ProfileSettingsActivity NetworkSensingBaseActivity) - It creates a new user profile and saves the details to the backend - It verifies the data for profile setting to ensure that the client enters the correct data with the correct format - It converts the image-url into string - It verifies the profile picture to ensure it meets the requirements and the client uploads the correct image Client Validation for validating if the client have entered the valid credentials of profile setup. kazi/app/java/ke.co.kaziapp/ui/v1/profilesetting activity.kt(private fun validate) - It creates a new user profile and saves the details to the backend - It verifies the data for profile setting to ensure that the client enters the correct data with the correct format - It converts the image-url into string - It verifies the profile picture to ensure it meets the requirements and the client uploads the correct image Notification screen to notify the client of the new services that are available in the application. kazi/app/java/ke.co.kaziapp/src/main/view/client/inbox/notifications/InboxNotificationsAdapter.kt Client reset password screen kazi/app/java/ke.co.kaziapp/ui/v1/forgot password Activity/private fun resetPassword - It verifies to check if the user has entered the correct credential for resseting password - It validates the new password created Explore service screen kazi/app/java/ke.co.kaziapp/ui/v1/servicelistActivity( class ServicesListActivity : NetworkSensingBaseActivity - It Validation to validate if the user have entered the valid credentials. kazi/app/java/ke.co.kaziapp/ui/v1/profilesetting activity.kt( private fun validate) Explore Service category screen kazi/app/java/ke.co.kaziapp/ui/v1/service category Activity.kt(class ServiceSubCategoryActivity : NetworkSensingBaseActivity) Service sub-category screen kazi/app/java/ke.co.kaziapp/ui/v1/servicesubcategoryActivity,kt(class ServiceSubCategoryActivity : NetworkSensingBaseActivity) - It creates a new service sub-category and saves the details to the backend - It verifies service sub-category details before saving - It validate the service sub-category entities to ensure it is in the right format Service provider screen kazi/app/java/ke.co.kaziapp/ui/v1/serviceproviderinfoActivity,kt( class ServiceProviderInfoActivity : AppCompatActivity) Client review screen kazi/app/java/ke.co.kaziapp/ui/v1/review/ClientreviewFragment(class ClientReviewsFragment) - It verifies client review details - It validate the client review entities to ensure it is in the right format Terms and condition screen kazi/app/java/ke.co.kaziapp/ui/v1/terms and conditions Activity,kt( class TermAndConditionsActivity : AppCompatActivity) Chat screen kazi/app/java/ke.co.kaziapp/ui/v1/ChatsActivity.kt( class Terms And Conditions Activity : AppCompatActivity) Service provider Sign up screen kazi/app/java/ke.co.kaziapp/ui/v1/RegisterActivity.kt(private fun validate) - It creates a new service provider and save the the details into the backend - It verifies the service provider details before registering - It validate the service provider entities to make sure it is in the right format - It ensures service provider agrees with the terms and condition before registering Authentication to check if the service provider has entered the correct credentials. kazi/app/java/ke.co.kaziapp/ui/v1/RegisterActivity.kt(private fun validate) Service provider set up profile screen kazi/app/java/ke.co.kaziapp/ui/v1/profilesetting activity.kt(class ProfileSettingsActivity NetworkSensingBaseActivity) - It creates a new service provider profile and saves the details into the backend - It verifies the data for profile setting to ensure that the service provider enters the correct data with the correct format - It converts the image-url into string - It verifies the profile picture to ensure it meets the requirements and the service provider uploads the correct image","title":"Frontend"},{"location":"backend/","text":"Client data model for holding the attributes of sign up backend/models/users_mdls.js(var usersSchema=new Schema) It stores user signup credentials It save user credentials for sing up and exports it to the database where is stored Client data model for holding the attributes of sign up backend/models/users_mdls.js(var usersSchema=new Schema) It stores user signup credentials It save user credentials for sing up and exports it to the database where is stored Client Authentication to check if the user has entered a valid username and password for login. Client data models for holding the client attributes of login backend/models/users_mdls.js(var usersSchema=new Schema) It stores client login credentials It save user credentials for login and exports it to the database where is stored Client data model for holding the attributes of the client profile setup It stores client profile setup credentials It save user credentials for profile setup and exports it to the database where is stored backend/models/users_mdls.jsVar UsersSchema = new Schema) Client data model for holding the attributes of resetting the password backend/services/users_srv.js Async function reset_password) It stores user reset password credentials It save user credentials for resetting password and exports it to the database where it is stored Send email for verifying client reset password. backend/interfaces/email.js(const sendEmail=async(to,subject,content,attachment) Data models for holding the attributes of the different services backend/models/services_mdls.js(Var ServicesSchema ) It stores the atributes of different services It saves the attributes of the different services and exports them to the database where it is stored Data model for holding the attributes of the service category backend/models/service_category_mdls.js(var ServiceCategorySchema = new Schema) It stores attributes of different service categories It saves the attributes of the different service categories and exports them to the database where it is stored Data models for holding the attributes of the service sub-category backend/models/service_sub_category_mdls.js(var ServiceSubCategorySchema) It stores the attributes of the diiferent service sub categories It saves the attributes of the different service sub categories and exports them to the database where it is stored Data model for holding the credentials of the service provider. backend/models/service_provider_mdls.js(var ServiceProviderSchema = new Schema) It stores the credintials of different service providers It saves the credentials of different service providers and exports them to the database where it is stored data model for holding the data of the client review backend/models/reviews_mdls.js(var ReviewSchema = new Schema) It stores the data of the client review It saves the data of the client reviews and exports them into the database where it is stored Data model for getting the client review backend/controllers/review_ctrl.js(var ReviewSchema = new Schema) It stores the attributes for getting client reviews It saves the attributes of getting client reviews and exports them into the database where it is stored Data model for holding the terms and condition attributes backend/models/terms_condition_mdls.js(Var TncSchema=new Schema) It stores the attributes for the terms and conditions It saves the attributes of the terms and conditions and exports them into the database where it is stored Data model for holding the service provider registeration attributes backend/services/service_provider_srv.js(add_service_provider It stores the credentials for service provider regestration It saves the credentials of the service rpovider regestration and exports them into the database where is stored Verification to check if the service provider provider account is already existing. backend/services/service_provider_srv.js(add_service_provider It stores the attributes for service provider verification account It saves attributes of the service provider account verification and exports them in to the database where it is stored Data model for holding the attributes of the service provider profile information. . backend/services/service_provider_srv.js(add_service_provider It stores the attributes for service provider profile information It saves the attributes of the service provider profile information and exports them into the database where is stored","title":"Backend"}]}